# Current

Changes:
- Revisited noexcept specifiers.
- Fixed a universal reference for the pg::connection_owner::connect overload that
  connects function objects.

# 2.0.1

Changes:
- pg::connection_owner now uses a vector instead of a set to store connections.
  A vector is faster more memory efficient than a set when used as a storage.
  Also this makes possible to make the order of disconnecting observers from 
  the subjects the reverse of they were connected.
- Added pg::connect functions which return a pg::scoped_connection. These can
  be used in case a connection_owner is a overkill, for example when you need
  to connect only one subject.
  The lifetime of the connection is coupeld to pg::scoped_connection.
- Renamed pg::observer_owner to pg::connection_owner and provided an alias for
  the old name to ensure backwards compatibility.
  The new name expresses better the functionality of the object. 
- pg::connection_owner supports static polymorphism for subjects. A subject is
  required to have a connect and a disconnect function that accepts an observer
  interace pointer as parameter.
- Added pg::blockable_subject. This subject type maintains a block count so
  that multiple resources can block its notifications.

Breaking changes:
- The overload pg::connection_owner::connect which connected one subject to
  another is removed. Use the connect overload for member functions instead.
  See tests or chain_subjects example.
- pg::subject is no longer blockable, use pg::blockable_subject instead.
- pg::subject_blocker now requires subjects to provide a block and a unblock
  function, for example like pg::blockable_subject.
- A connection is no longer automaticly invalidated. The usability of this
  feature didn't justify the extra complexity.  

# 1.1.1

Changes:
- Restored the detail namespace in observer.h. 
- Added a simple benchmark to get an idea about the overhead.

# 1.1.0

Changes:
- The destructor of subject now calls the disconnect of its observers in the
  reversed order the in which observers were connected.
- Refactored the connection handle.
- Made pg::invoke part of the public API.
- Added doxygen documentation for the public API.
- Changed the observer interface to allow custom observer types.

# v1.0.0

- Initial release
